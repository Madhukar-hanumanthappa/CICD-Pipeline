name: dev-manual-deployment
on:
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
jobs:
  AssumeRole:
    runs-on: [ ubuntu-latest ]
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    # - name: Extract branch name
    #   id: extract_branch
    #   run: echo "BRANCH_NAME=${GITHUB_REF#refs/head/}" >> $GITHUB_ENV
    # - name: Get TIMESTAMP
    #   id: get-timestamp
    #   run: |
    #     echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M')"
    # - name: Build and tag image service1
    #   id: build-image1
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPO1: dev-service1
    #     IMAGE_TAG: "${{ steps.get-timestamp.outputs.timestamp }}"
    #   run: |
    #     cd service1
    #     docker build -t dev-service1:latest .
    #     docker tag dev-service1:latest $ECR_REGISTRY/$ECR_REPO1:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPO1:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    # - name: Download task definition
    #   run: |
    #       aws ecs describe-task-definition --task-definition dev-service1.json \
    #       --query taskDefinition > dev-service1.json
    # - name: change path
    #   run: |
    #     cd service1
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def1
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: dev-service1.json
    #     container-name: dev-service1
    #     image: ${{ steps.build-image1.outputs.image }}
    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def1.outputs.task-definition }}
    #     service: dev-service1
    #     cluster: git-actions-dev
    #     wait-for-service-stability: true
    # - name: Build and tag image service2
    #   id: build-image2
    #   env:
    #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
    #     ECR_REPO2: dev-service2
    #     # IMAGE_TAG: ${{ github.ref_slug }}
    #   run: |
    #     cd service2
    #     docker build -t dev-service2 .
    #     docker tag dev-service2:latest $ECR_REGISTRY/$ECR_REPO2:latest
    #     docker push $ECR_REGISTRY/$ECR_REPO2:latest
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
    # # - name: Download task definition
    # #   run: |
    # #       aws ecs describe-task-definition --task-definition dev-service1.json \
    # #       --query taskDefinition > dev-service1.json
    # # - name: change path
    # #   run: |
    # #     cd service1
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def2
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: dev-service2.json
    #     container-name: dev-service2
    #     image: ${{ steps.build-image1.outputs.image }}
    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def2.outputs.task-definition }}
    #     service: dev-service2
    #     cluster: git-actions-dev
    #     wait-for-service-stability: true
